컴포넌트는 전역 또는 로컬에 등록 한 후, 사용자 정의 태그로 사용 가능

Vue.component 메소드를 사용해서 전역에 등록하면 자동으로 모든 컴포넌트에서 사용 가능.
메소드의 매개변수로 전달되는 정보
1) 사용자 정의 태그로 사용할 이름
2) 컴포넌트의 옵션 객체

컴포넌트의 정의
Vue.component( 'my-component', {
  template: '<p>MyComponent</p>'
})
컴포넌트 = 부품

컴포넌트 사용
<div id='app'>
<my-component></my-component>
</div>

실제 렌더링 결과
<div id='app'>
<p>MyComponent</p>
</div>

로컬에 등록
컴포넌트 정의를 특정한 컴포넌트의 components 옵션에 등록
-> 로컬로 등록된 해당 컴포넌트 범위(스코프;scope) 내부에서만 해당 컴포넌트를  사용할 수 있도록 제한 가능
--> 변수와 같은 역할을 한다.

// 컴포넌트 정의
var myComponent = {
  template = '<p>MyComponent</p>'
}

new Vue( {
  el: '#app',
  components: {
    // <my-component>가 루트에서만 사용 가능
    'my-component': myComponent
  }
});

컴포넌트 옵션
루트 생성자 new Vue() 의 옵션과 같이 컴포넌트 전용 템플릿 외에도 데이터와 메소드 정의 가능

Vue.component( 'my-component', {
  // 템플릿
  template: '<p> {{ msg }} </p>',
  // 데이터는 객체를 리턴하는 함수 ㅣ정
  // data는  함수여야 하며, 객체를 리턴하는 함수로 정의해야 함!
  data: function() {
    return {
      msg: 'Hello! Vue~~'
    }
  },
  methods: {
    // 메소드, 산출 속성, 와처의 정의 방법
    // -> 루트 생성자의 객체와 동일
  }
})

## 템플릿의 루트 요소는 반드시 하나여야만 한다!
// p 요소가 하나를 초과하기 때문에 사용 불가
template: '<p>내용1</p><p>내용2</p>'
> 요소 자체가 2개는 안됀다. 1개만 가능하다. 그래서 돔 구조를 사용하는 방법으로 이용.

// 여러 개의 요소가 필요 한 경우 전체를 다른 요소로 감싸주면 결과적으로 1개의 요소이므로 조건 만족
template: '<div> id='app'><p>내용1</p><p>내용2</p></div>'
> div로 묶어서 여러개를 한 번에 사용할 수 있게 만들었다.

컴포넌트 인스턴스(instance)
<div id='app'>
  <my-component></my-component>
  <my-component></my-component>
</div>

컴포넌트를 여러 번 사용한 경우 my-component를 기반으로 만들어진 완전히 다른 인스턴스로 취급됨
별도의 고유 속성을 가지고 있지 않으면 두 가지는 완전히 같은 동작을 함.